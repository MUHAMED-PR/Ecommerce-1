<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/images/icons/favicon-16x16.png">
    <!-- Custom CSS -->
    <style>
        body {
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
        }
        .container {
            margin-top: 50px;
            padding: 20px;
            border-radius: 10px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .order-section {
            border-bottom: 1px solid #e9ecef;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }
        .product-item {
            padding: 10px;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        .product-item h5 {
            margin: 0;
            font-size: 1.1rem;
        }
        .product-item p {
            margin: 5px 0;
        }
        .btn-container {
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>

    <div class="container">
        <h2 class="text-center mb-4">Order Details</h2>
        
        <div class="order-section">
            <h4 class="mb-3">Order Information</h4>
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Order ID:</strong> <%= orderDetails._id %></p>
                    <p><strong>Order Date:</strong> <%= orderDetails.orderDate.toDateString() %></p>
                </div>
                <div class="col-md-6">
                    <p><strong>Payment Method:</strong> <%= orderDetails.paymentMethod %></p>
                    <p><strong>Total Amount:</strong> ₹<%= orderDetails.totalAmount %></p>
                    <p><strong>Payment Status:</strong><%= orderDetails.paymentStatus %></p>
                    <% if(orderDetails.paymentStatus == 'Not Paid'){ %>
                        <a onclick="rzr('<%=orderDetails._id %>','<%= orderDetails.totalAmount %>')">Re-payment</a>
                        <% } %>
                    
                </div>
            </div>
        </div>
    
        <div class="order-section">
            <h4 class="mb-3">Shipping Address</h4>
            <p><%= orderDetails.shippingAddress.fullName %></p>
            <p><%= orderDetails.shippingAddress.street %></p>
            <p><%= orderDetails.shippingAddress.city %>, <%= orderDetails.shippingAddress.state %> - <%= orderDetails.shippingAddress.pincode %></p>
            <p><strong>Contact Number:</strong> <%= orderDetails.shippingAddress.phone %></p>
        </div>
        
        <div class="order-section">
            <h4 class="mb-3">Ordered Product</h4>
            <div class="product-item">
                <h5><%= infoOfProduct.productId.name %></h5>
                <p><strong>Price:</strong> ₹<%= infoOfProduct.price %></p>
                <p><strong>Quantity:</strong> <%= infoOfProduct.quantity %></p>
                <p><strong>Subtotal:</strong> ₹<%= infoOfProduct.price * infoOfProduct.quantity %></p>
                <p><strong>Delivery Status:</strong> <%= infoOfProduct.orderStatus %></p>
               
            </div>
        </div>
    
        <div class="btn-container">
            <a href="/userProfile" class="btn btn-primary btn-lg">Go Back</a>

            <a href="/" class="btn btn-secondary btn-lg">Continue Shopping</a>
    
            <!-- Show Invoice Button and Return Order Option only if Delivered -->
            <% if (infoOfProduct.orderStatus === 'Delivered') { %>
                <!-- Invoice Button -->
                <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#invoiceModal">View Invoice</button>
                <!-- Return Order Button -->
                <button type="button" class="btn btn-warning btn-lg" onclick="returnOrder('<%= orderDetails._id %>','<%=infoOfProduct._id %>')">Return Order</button>
            <% }else if(['Pending', 'Processing'].includes(infoOfProduct.orderStatus)){ %>
                <!-- Cancel Order Button -->
                <button type="button" class="btn btn-lg" style="background-color: #dc3545; color: white;" onclick="cancelOrder('<%= orderDetails._id %>','<%=infoOfProduct._id %>')">Cancel Order</button>

                <% } %>
        </div>
    </div>
    
    <!-- Invoice Modal -->
    <div class="modal fade" id="invoiceModal" tabindex="-1" aria-labelledby="invoiceModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content" >
          <div class="modal-header">
            
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div id="invoice-content">
            <h3 class="modal-title" id="invoiceModalLabel">Invoice</h3>
          <div class="modal-body">
            <!-- Invoice Details -->
            <h5>Order ID: <%= orderDetails._id %></h5>
            <p><strong>Date:</strong> <%= orderDetails.orderDate.toDateString() %></p>
            <p><strong>Payment Method:</strong> <%= orderDetails.paymentMethod %></p>
            <p><strong>Total Amount:</strong> ₹<%= orderDetails.totalAmount %></p>
    
            <h4>Shipping Address</h4>
            <p><%= orderDetails.shippingAddress.fullName %></p>
            <p><%= orderDetails.shippingAddress.street %></p>
            <p><%= orderDetails.shippingAddress.city %>, <%= orderDetails.shippingAddress.state %> - <%= orderDetails.shippingAddress.pincode %></p>
            <p><strong>Contact Number:</strong> <%= orderDetails.shippingAddress.phone %></p>
    
            <h4>Products</h4>
            <ul>
                <li><strong>Product:</strong> <%= infoOfProduct.productId.name %></li>
                <li><strong>Price:</strong> ₹<%= infoOfProduct.price %></li>
                <li><strong>Quantity:</strong> <%= infoOfProduct.quantity %></li>
                <li><strong>Subtotal:</strong> ₹<%= infoOfProduct.price * infoOfProduct.quantity %></li>  
            </ul>
          </div>
        </div>
          <div class="modal-footer">
            <button id="downloadInvoice" class="btn btn-sm btn-primary">Download</button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
    

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
    <script>
       async function rzr(id,total){
            const {data}=await axios.put('/order/creatRazorpayInstence',{id})
            if (data.orderId) {
                const options = {
                    "key": data.keyId,
                    "amount": total * 100, // Amount in paisa
                    "currency": "INR",
                    "name": "E-Commerce Site",
                    "description": "Test Transaction",
                    "order_id": data.orderId,
                    "handler": async function (response) {
                        await axios.put('/order/updatePaymentStatus',{id:id,status:"Paid"})
                        paymentStatus.value = 'Paid'
                        window.location.reload()
                    },
                    "prefill": {
                        "name": "Test User",
                        "email": "test@example.com",
                        "contact": "9999999999"
                    },
                    "notes": {
                        "address": "Test Address"
                    },
                    "theme": {
                        "color": "#3399cc"
                    }
                };
                const rzp1 = new Razorpay(options);
                rzp1.on('payment.failed', async() => {
                    await axios.put('/order/updatePaymentStatus',{id:data._id,status:"Not Paid"})
                    alert("payment failed");
                        
                 })
                rzp1.open();
            } else {
                alert(data.message);
            }
        }
    </script>
    <script>
        document.getElementById('downloadInvoice').addEventListener('click', function () {
            const invoiceElement = document.getElementById('invoice-content');
            html2pdf(invoiceElement, {
                margin: 1,
                filename: 'invoice.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2 },
                jsPDF: { unit: 'in', format: 'letter' }
            });
        });
    </script>

    <!-- Bootstrap JS (optional) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <!-- axios  -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- sweetAlert  -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    
    
    <script>
    // Return Order Script 

       function returnOrder(orderId, itemId) {
    // Show SweetAlert confirmation dialog
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to return this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, return it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            // If the user confirms, proceed with the return order request
            axios.patch(`/order/returnOrder/${orderId}/${itemId}`)
                .then(response => {
                    console.log('the reponse in the returnOrder fetch',response.data); // Handle success response
                    Swal.fire(
                        'Returned!',
                        'Your order has been returned.',
                        'success'
                    ).then(() => {
                     // Reload the page after the user clicks 'OK'
                     window.location.reload();
                  });
                })
                .catch(error => {
                    console.error('Error returning order:', error); // Handle error response
                    Swal.fire(
                        'Error!',
                        'Failed to return the order. Please try again.',
                        'error'
                    );
                });
        } else {
            // If the user cancels, you can handle it here (optional)
            console.log('Order return canceled.');
        }
    });
}
        


     // Cancel Order Script 

     function cancelOrder(orderId, itemId) {
    // Show SweetAlert confirmation dialog
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            // If the user confirms, proceed with the return order request
            axios.patch(`/order/cancelOrder/${orderId}/${itemId}`)
                .then(response => {
                    console.log('the reponse in the cancelOrder fetch',response.data); // Handle success response
                    Swal.fire(
                        'Cancelled!',
                        'Your order has been Cancelled.',
                        'success'
                    ).then(() => {
                     // Reload the page after the user clicks 'OK'
                     window.location.reload();
                  });
                })
                .catch(error => {
                    console.error('Error cancelling order:', error); // Handle error response
                    Swal.fire(
                        'Error!',
                        'Failed to return the order. Please try again.',
                        'error'
                    );
                });
        } else {
            // If the user cancels, you can handle it here (optional)
            console.log('Order return canceled.');
        }
    });
}

    </script>
    
    </body>
    </html>
    
